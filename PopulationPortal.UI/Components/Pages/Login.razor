@page "/login"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using PopulationPortal.Application.Services.AppUsers
@using PopulationPortal.Application.Services.AppUsers.Models.Dtos
@using System.Security.Claims
@inject IAppUserService AppUserService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<h3>Login</h3>

<EditForm Enhance Model="LoginModel" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="username">Username</label>
        <InputText id="username" class="form-control" @bind-Value="LoginModel.Username" />
    </div>
    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" class="form-control" type="password" @bind-Value="LoginModel.Password" />
    </div>
    <div class="mt-3">
        <button type="submit" class="btn btn-primary">Login</button>
        <NavLink class="btn btn-secondary" href="/">Cancel</NavLink>
    </div>
</EditForm>




@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <p class="text-danger">@ErrorMessage</p>
}

@code {
    [CascadingParameter]
    public HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private LoginDto LoginModel { get; set; } = new();
    private string ErrorMessage;

    private async Task HandleLogin()
    {
        var loginResponse = await AppUserService.Login(LoginModel);

        if (loginResponse.IsSuccess)
        {
            // Create authentication cookie
            var claims = new List<Claim>
            {
                new Claim(ClaimTypes.Name, LoginModel.Username),
            };

            var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
            var authProperties = new AuthenticationProperties
                {
                    IsPersistent = true, // Persistent cookie
                };

            await HttpContext.SignInAsync(
                CookieAuthenticationDefaults.AuthenticationScheme,
                new ClaimsPrincipal(claimsIdentity),
                authProperties
            );
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = loginResponse.Message;

        }
    }


}


